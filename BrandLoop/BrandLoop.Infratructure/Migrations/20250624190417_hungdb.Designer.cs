// <auto-generated />
using System;
using BrandLoop.Infratructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BrandLoop.Infratructure.Migrations
{
    [DbContext(typeof(BLDBContext))]
    [Migration("20250624190417_hungdb")]
    partial class hungdb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BrandLoop.Domain.Entities.AuditLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TargetId")
                        .HasColumnType("int");

                    b.Property<string>("TargetTable")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("LogId");

                    b.HasIndex("UID");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.BrandProfile", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanySize")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EstablishedYear")
                        .HasColumnType("int");

                    b.Property<string>("Facebook")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Instagram")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tiktok")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("BrandId");

                    b.HasIndex("UID")
                        .IsUnique();

                    b.ToTable("BrandProfiles");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Campaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CampaignId"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CampaignGoals")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CampaignName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContentRequirements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CampaignId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.CampaignImage", b =>
                {
                    b.Property<int>("CampaignImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CampaignImageId"));

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CampaignImageId");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampainImages");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.CampaignInvitation", b =>
                {
                    b.Property<int>("InvitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvitationId"));

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NegotiateMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ProposedRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("InvitationId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("UID");

                    b.ToTable("CampaignInvitations");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.CampaignReport", b =>
                {
                    b.Property<int>("CampaignReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CampaignReportId"));

                    b.Property<double?>("AvgEngagementRate")
                        .HasColumnType("float");

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<decimal?>("CostPerEngagement")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ROAS")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TotalClicks")
                        .HasColumnType("int");

                    b.Property<int?>("TotalEngagement")
                        .HasColumnType("int");

                    b.Property<int?>("TotalImpressions")
                        .HasColumnType("int");

                    b.Property<int?>("TotalReach")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalSpend")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CampaignReportId");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignReports");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.ContentAndStyle", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentId"));

                    b.Property<string>("ContentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("ContentId");

                    b.HasIndex("UID");

                    b.ToTable("ContentAndStyles");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Conversation", b =>
                {
                    b.Property<int>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConversationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ConversationId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.ConversationParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LeftAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UID");

                    b.ToTable("ConversationParticipants");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Deal", b =>
                {
                    b.Property<int>("DealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DealId"));

                    b.Property<decimal?>("AdminCommissionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AdminCommissionRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvitationId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DealId");

                    b.HasIndex("InvitationId");

                    b.ToTable("Deals");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Feature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("FeatureId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FeedbackFrom")
                        .HasColumnType("int");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("FeedbackId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("UID");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.InfluenceProfile", b =>
                {
                    b.Property<int>("InfluenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InfluenceId"));

                    b.Property<decimal?>("AverageRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentCategory")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("DayOfBirth")
                        .HasColumnType("date");

                    b.Property<decimal?>("EngagementRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Facebook")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("FollowerCount")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("InfluencerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Instagram")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PortfolioUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Tiktok")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.Property<string>("Youtube")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("InfluenceId");

                    b.HasIndex("InfluencerTypeId");

                    b.HasIndex("UID")
                        .IsUnique();

                    b.ToTable("InfluenceProfiles");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.InfluencerReport", b =>
                {
                    b.Property<int>("InfluencerReportId")
                        .HasColumnType("int");

                    b.Property<double>("AvgEngagementRate")
                        .HasColumnType("float");

                    b.Property<int>("TotalClicks")
                        .HasColumnType("int");

                    b.Property<string>("TotalContent")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TotalEngagement")
                        .HasColumnType("int");

                    b.Property<int>("TotalImpressions")
                        .HasColumnType("int");

                    b.Property<int>("TotalReach")
                        .HasColumnType("int");

                    b.HasKey("InfluencerReportId");

                    b.ToTable("InfluencerReports");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.InfluencerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MaxFollower")
                        .HasColumnType("int");

                    b.Property<int>("MinFollower")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PlatformFee")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("InfluencerTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxFollower = 10000,
                            MinFollower = 0,
                            Name = "Norman",
                            PlatformFee = 10000
                        },
                        new
                        {
                            Id = 2,
                            MaxFollower = 50000,
                            MinFollower = 10000,
                            Name = "Nano Influencers",
                            PlatformFee = 100000
                        },
                        new
                        {
                            Id = 3,
                            MaxFollower = 100000,
                            MinFollower = 50000,
                            Name = "Micro Influencers",
                            PlatformFee = 200000
                        },
                        new
                        {
                            Id = 4,
                            MaxFollower = 500000,
                            MinFollower = 100000,
                            Name = "Mid-Tier Influencers",
                            PlatformFee = 300000
                        },
                        new
                        {
                            Id = 5,
                            MaxFollower = 1000000,
                            MinFollower = 500000,
                            Name = "Macro Influencers",
                            PlatformFee = 500000
                        });
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.KolsJoinCampaign", b =>
                {
                    b.Property<int>("KolsJoinCampaignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KolsJoinCampaignId"));

                    b.Property<DateTime>("AppliedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("KolsJoinCampaignId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("UID");

                    b.ToTable("KolsJoinCampaigns");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("AttachmentUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("Sender");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.MessageReadStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("UID");

                    b.ToTable("MessageReadStatuses");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.News", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewsId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeaturedImage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("NewsId");

                    b.HasIndex("Author");

                    b.ToTable("News");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RelatedId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("NotificationId");

                    b.HasIndex("UID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Payment", b =>
                {
                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("CampaignId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int?>("SubscriptionRegisterId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("SubscriptionRegisterId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.RefreshTokens", b =>
                {
                    b.Property<int>("RId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RId"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("RId");

                    b.HasIndex("UID");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Resource", b =>
                {
                    b.Property<int>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResourceId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ResourceId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "System Administrator",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Brand/Company Account",
                            RoleName = "Brand"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Key Opinion Leader/Influencer",
                            RoleName = "Influencer"
                        },
                        new
                        {
                            RoleId = 4,
                            Description = "Guest User",
                            RoleName = "Guest"
                        });
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillId"));

                    b.Property<string>("ProficiencyLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("SkillId");

                    b.HasIndex("UID");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SubscriptionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("SubscriptionId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.SubscriptionFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SubscriptionFeatures");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.SubscriptionRegister", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UID");

                    b.ToTable("SubscriptionRegisters");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CommissionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CommissionRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalTransactionCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("FromWalletId")
                        .HasColumnType("int");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceTable")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ToWalletId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TransactionId");

                    b.HasIndex("FromWalletId");

                    b.HasIndex("ToWalletId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.User", b =>
                {
                    b.Property<string>("UID")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfileImage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UID");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserUID")
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("WalletType")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("WalletId");

                    b.HasIndex("UID");

                    b.HasIndex("UserUID");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.AuditLog", b =>
                {
                    b.HasOne("BrandLoop.Domain.Entities.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.BrandProfile", b =>
                {
                    b.HasOne("BrandLoop.Domain.Entities.User", "User")
                        .WithOne("BrandProfile")
                        .HasForeignKey("BrandLoop.Domain.Entities.BrandProfile", "UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Campaign", b =>
                {
                    b.HasOne("BrandLoop.Domain.Entities.BrandProfile", "Brand")
                        .WithMany("Campaigns")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrandLoop.Domain.Entities.User", "Creator")
                        .WithMany("CreatedCampaigns")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.CampaignImage", b =>
                {
                    b.HasOne("BrandLoop.Domain.Entities.Campaign", "Campaign")
                        .WithMany("CampaignImages")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.CampaignInvitation", b =>
                {
                    b.HasOne("BrandLoop.Domain.Entities.Campaign", "Campaign")
                        .WithMany("CampaignInvitations")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrandLoop.Domain.Entities.User", "User")
                        .WithMany("CampaignInvitations")
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.CampaignReport", b =>
                {
                    b.HasOne("BrandLoop.Domain.Entities.Campaign", "Campaign")
                        .WithMany("CampaignReports")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.ContentAndStyle", b =>
                {
                    b.HasOne("BrandLoop.Domain.Entities.User", "User")
                        .WithMany("ContentAndStyles")
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.ConversationParticipant", b =>
                {
                    b.HasOne("BrandLoop.Domain.Entities.Conversation", "Conversation")
                        .WithMany("Participants")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrandLoop.Domain.Entities.User", "User")
                        .WithMany("ConversationParticipants")
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Deal", b =>
                {
                    b.HasOne("BrandLoop.Domain.Entities.CampaignInvitation", "Invitation")
                        .WithMany("Deals")
                        .HasForeignKey("InvitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invitation");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("BrandLoop.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrandLoop.Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.InfluenceProfile", b =>
                {
                    b.HasOne("BrandLoop.Domain.Entities.InfluencerType", "InfluencerType")
                        .WithMany("InfluenceProfiles")
                        .HasForeignKey("InfluencerTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BrandLoop.Domain.Entities.User", "User")
                        .WithOne("InfluenceProfile")
                        .HasForeignKey("BrandLoop.Domain.Entities.InfluenceProfile", "UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InfluencerType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.InfluencerReport", b =>
                {
                    b.HasOne("BrandLoop.Domain.Entities.KolsJoinCampaign", "KolsJoinCampaign")
                        .WithOne("InfluencerReport")
                        .HasForeignKey("BrandLoop.Domain.Entities.InfluencerReport", "InfluencerReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KolsJoinCampaign");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.KolsJoinCampaign", b =>
                {
                    b.HasOne("BrandLoop.Domain.Entities.Campaign", "Campaign")
                        .WithMany("KolsJoinCampaigns")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrandLoop.Domain.Entities.User", "User")
                        .WithMany("KolsJoinCampaigns")
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Message", b =>
                {
                    b.HasOne("BrandLoop.Domain.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrandLoop.Domain.Entities.User", "SenderUser")
                        .WithMany("Messages")
                        .HasForeignKey("Sender")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.MessageReadStatus", b =>
                {
                    b.HasOne("BrandLoop.Domain.Entities.Message", "Message")
                        .WithMany("ReadStatuses")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrandLoop.Domain.Entities.User", "User")
                        .WithMany("MessageReadStatuses")
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.News", b =>
                {
                    b.HasOne("BrandLoop.Domain.Entities.User", "AuthorUser")
                        .WithMany("News")
                        .HasForeignKey("Author")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AuthorUser");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Notification", b =>
                {
                    b.HasOne("BrandLoop.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Payment", b =>
                {
                    b.HasOne("BrandLoop.Domain.Entities.Campaign", "campaign")
                        .WithMany("Payments")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BrandLoop.Domain.Entities.SubscriptionRegister", "SubscriptionRegister")
                        .WithMany("Payments")
                        .HasForeignKey("SubscriptionRegisterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("SubscriptionRegister");

                    b.Navigation("campaign");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.RefreshTokens", b =>
                {
                    b.HasOne("BrandLoop.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Skill", b =>
                {
                    b.HasOne("BrandLoop.Domain.Entities.User", "User")
                        .WithMany("Skills")
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.SubscriptionFeature", b =>
                {
                    b.HasOne("BrandLoop.Domain.Entities.Feature", "Feature")
                        .WithMany("SubscriptionFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrandLoop.Domain.Entities.Subscription", "Subscription")
                        .WithMany("SubscriptionFeatures")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.SubscriptionRegister", b =>
                {
                    b.HasOne("BrandLoop.Domain.Entities.Subscription", "Subscription")
                        .WithMany("SubscriptionRegisters")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrandLoop.Domain.Entities.User", "User")
                        .WithMany("SubscriptionRegisters")
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("BrandLoop.Domain.Entities.Wallet", "FromWallet")
                        .WithMany("FromTransactions")
                        .HasForeignKey("FromWalletId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BrandLoop.Domain.Entities.Wallet", "ToWallet")
                        .WithMany("ToTransactions")
                        .HasForeignKey("ToWalletId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FromWallet");

                    b.Navigation("ToWallet");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.User", b =>
                {
                    b.HasOne("BrandLoop.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Wallet", b =>
                {
                    b.HasOne("BrandLoop.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrandLoop.Domain.Entities.User", null)
                        .WithMany("Wallets")
                        .HasForeignKey("UserUID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.BrandProfile", b =>
                {
                    b.Navigation("Campaigns");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Campaign", b =>
                {
                    b.Navigation("CampaignImages");

                    b.Navigation("CampaignInvitations");

                    b.Navigation("CampaignReports");

                    b.Navigation("Feedbacks");

                    b.Navigation("KolsJoinCampaigns");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.CampaignInvitation", b =>
                {
                    b.Navigation("Deals");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Conversation", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Feature", b =>
                {
                    b.Navigation("SubscriptionFeatures");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.InfluencerType", b =>
                {
                    b.Navigation("InfluenceProfiles");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.KolsJoinCampaign", b =>
                {
                    b.Navigation("InfluencerReport")
                        .IsRequired();
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Message", b =>
                {
                    b.Navigation("ReadStatuses");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Subscription", b =>
                {
                    b.Navigation("SubscriptionFeatures");

                    b.Navigation("SubscriptionRegisters");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.SubscriptionRegister", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("BrandProfile")
                        .IsRequired();

                    b.Navigation("CampaignInvitations");

                    b.Navigation("ContentAndStyles");

                    b.Navigation("ConversationParticipants");

                    b.Navigation("CreatedCampaigns");

                    b.Navigation("Feedbacks");

                    b.Navigation("InfluenceProfile")
                        .IsRequired();

                    b.Navigation("KolsJoinCampaigns");

                    b.Navigation("MessageReadStatuses");

                    b.Navigation("Messages");

                    b.Navigation("News");

                    b.Navigation("Notifications");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Skills");

                    b.Navigation("SubscriptionRegisters");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("BrandLoop.Domain.Entities.Wallet", b =>
                {
                    b.Navigation("FromTransactions");

                    b.Navigation("ToTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
